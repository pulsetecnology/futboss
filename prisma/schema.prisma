// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  password    String
  isGuest     Boolean  @default(false)
  createdAt   DateTime @default(now())
  lastLogin   DateTime @updatedAt
  
  // Relacionamentos
  fantasyTeams FantasyTeam[]
  preferences  UserPreferences?
  
  @@map("users")
}

model UserPreferences {
  id                String @id @default(cuid())
  userId            String @unique
  favoriteTeam      String?
  preferredFormation String @default("4-4-2")
  notifications     Boolean @default(true)
  
  // Relacionamentos
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_preferences")
}

model Player {
  id            String         @id @default(cuid())
  name          String         @unique
  position      PlayerPosition
  currentTeam   String
  league        String?
  marketValue   Float
  currentScore  Float          @default(0)
  averageScore  Float          @default(0)
  physicalStatus PhysicalStatus @default(AVAILABLE)
  photoUrl      String?
  nationality   String?
  age           Int?
  apiId         String?        // ID do jogador na API-Sports
  lastSyncAt    DateTime?      // Última sincronização
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  // Relacionamentos
  teamPlayers   TeamPlayer[]
  playerStats   PlayerStats?
  playerScouts  PlayerScouts?
  club          Club?          @relation(fields: [clubId], references: [id])
  clubId        String?
  
  @@map("players")
}

model PlayerStats {
  id             String @id @default(cuid())
  playerId       String @unique
  season         Int    @default(2023)
  gamesPlayed    Int    @default(0)
  minutesPlayed  Int    @default(0)
  goals          Int    @default(0)
  assists        Int    @default(0)
  yellowCards    Int    @default(0)
  redCards       Int    @default(0)
  saves          Int?   @default(0)  // Para goleiros
  cleanSheets    Int?   @default(0)  // Para goleiros
  goalsConceded  Int?   @default(0)  // Para goleiros
  passes         Int    @default(0)
  passAccuracy   Float? @default(0)
  tackles        Int    @default(0)
  interceptions  Int    @default(0)
  blocks         Int    @default(0)
  duelsWon       Int    @default(0)
  duelsTotal     Int    @default(0)
  dribbles       Int    @default(0)
  foulsDrawn     Int    @default(0)
  foulsCommitted Int    @default(0)
  penaltiesScored Int   @default(0)
  penaltiesMissed Int   @default(0)
  lastGameRating Float  @default(0)
  averageRating  Float  @default(0)
  updatedAt      DateTime @updatedAt
  
  // Relacionamentos
  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  
  @@map("player_stats")
}

model PlayerScouts {
  id              String @id @default(cuid())
  playerId        String @unique
  season          Int    @default(2023)
  // Scouts ofensivos
  goalsScout      Float  @default(0)    // Pontos por gols
  assistsScout    Float  @default(0)    // Pontos por assistências
  finalizationScout Float @default(0)  // Pontos por finalizações
  // Scouts defensivos
  tacklesScout    Float  @default(0)    // Pontos por desarmes
  interceptionsScout Float @default(0) // Pontos por interceptações
  blocksScout     Float  @default(0)    // Pontos por bloqueios
  // Scouts de goleiro
  savesScout      Float  @default(0)    // Pontos por defesas
  cleanSheetsScout Float @default(0)   // Pontos por jogos sem sofrer gols
  penaltiesSavedScout Float @default(0) // Pontos por pênaltis defendidos
  // Scouts gerais
  disciplineScout Float  @default(0)    // Pontos por disciplina (cartões negativos)
  passesScout     Float  @default(0)    // Pontos por passes
  duelsScout      Float  @default(0)    // Pontos por duelos ganhos
  // Scout total
  totalScout      Float  @default(0)    // Soma de todos os scouts
  lastUpdated     DateTime @updatedAt
  
  // Relacionamentos
  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  
  @@map("player_scouts")
}

model Club {
  id       String @id @default(cuid())
  name     String @unique
  league   String
  country  String
  logoUrl  String?
  apiId    String? // ID do time na API (TeamId da SportsData)
  apiKey   String? // Chave do time na API (Key da SportsData)
  
  // Relacionamentos
  players  Player[]
  
  @@map("clubs")
}

model FantasyTeam {
  id          String   @id @default(cuid())
  userId      String
  name        String
  formation   String   @default("4-4-2")
  totalValue  Float    @default(0)
  totalPoints Float    @default(0)
  budget      Float    @default(100000000) // 100M budget padrão
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relacionamentos
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamPlayers TeamPlayer[]
  
  @@map("fantasy_teams")
}

model TeamPlayer {
  id               String @id @default(cuid())
  fantasyTeamId    String
  playerId         String
  position         PlayerPosition
  acquisitionValue Float
  currentPoints    Float @default(0)
  
  // Relacionamentos
  fantasyTeam FantasyTeam @relation(fields: [fantasyTeamId], references: [id], onDelete: Cascade)
  player      Player      @relation(fields: [playerId], references: [id])
  
  @@unique([fantasyTeamId, playerId])
  @@map("team_players")
}

enum PlayerPosition {
  GOALKEEPER
  DEFENDER
  MIDFIELDER
  FORWARD
}

enum PhysicalStatus {
  AVAILABLE
  INJURED
  SUSPENDED
  DOUBTFUL
}